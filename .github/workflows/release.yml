name: Build patched Go and release

on:
  workflow_dispatch:
  release:
    types: [published]
  push:
    branches:
      - build
    paths:
      - ".github/workflows/release.yml"
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - ".github/workflows/release.yml"

jobs:
  build:
    runs-on: ubuntu-latest
    permissions:
      contents: write
    strategy:
      matrix:
        goos: [windows, linux]
        goarch: [amd64, 386]
        buildtarget: ['go1.23.6']
      fail-fast: false
    env:
      GOOS: ${{ matrix.goos }}
      GOARCH: ${{ matrix.goarch }}
      CGO_ENABLED: 0
    steps:
      - name: Show workflow information
        run: |
          _NAME="$GOOS-$GOARCH"
          echo "GOOS: $GOOS, GOARCH: $GOARCH, GOVER: ${{ matrix.buildtarget }}"
          echo "ASSET_NAME=$_NAME" >> $GITHUB_ENV

      - name: Set-up Go
        uses: actions/setup-go@v5
        with:
          go-version: stable
          check-latest: true

      - name: Download source
        uses: actions/checkout@v4
        with:
          repository: 'golang/go'
          ref: ${{ matrix.buildtarget }}

      # Patches for Go 1.23.x before more minor changes introduces.
      - name: Apply patch
        run: |
          curl https://github.com/XTLS/go-win7/commit/429f9a72007759a757c8e96a2763306c076dbb8f.diff | patch --verbose -p 1
          curl https://github.com/XTLS/go-win7/commit/ca03d8ed77dab8b91b69a9d44e6e56844fbcd5d8.diff | patch --verbose -p 1
          curl https://github.com/XTLS/go-win7/commit/719ab22f14443a88dd274f7a41afb86dd41628b1.diff | patch --verbose -p 1
          curl https://github.com/XTLS/go-win7/commit/ac17c301268dd7835236e61c9bfefdf2b8e633d5.diff | patch --verbose -p 1

      - name: Build patched Go
        shell: bash
        run: |
          cd ./src
          . ./make.bash "$@" --no-banner
          "$GOTOOLDIR/dist" banner
          cd ..
      
      - name: Copy binaries into bin
        shell: bash
        run: |
          cd ./bin
          DIRS=(windows_amd64 windows_386 linux_386)
          for DIR in "${DIRS[@]}"
          do
            if [ -d "${DIR}" ]; then
            echo "Found ${DIR} copying binaries"
            rm go*
            for BINARY in "${DIR}"
            do
              echo "mv ./${DIR}/${BINARY} ./"
              mv ./${DIR}/${BINARY} ./
            done
            rm "${DIR}"
          done
          cd ..
          ls -al ./bin

      - name: Upload package to Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: go-for-win7-${{ env.ASSET_NAME }}
          path: |
            ./*

      - name: create ZIP archive
        if: github.event_name == 'release'
        shell: bash
        run: |
          zip -9vr ./go-for-win7-${{ env.ASSET_NAME }}.zip . -x "./.git/" "./.github/"

      - name: Compute hashes for file
        if: github.event_name == 'release'
        run: |
          FILE=./go-for-win7-${{ env.ASSET_NAME }}.zip
          DGST=$FILE.dgst
          for METHOD in {"md5","sha1","sha256","sha512"}
          do
            openssl dgst -$METHOD $FILE | sed 's/([^)]*)//g' >>$DGST
          done

      - name: Upload packages to release
        uses: svenstaro/upload-release-action@v2
        if: github.event_name == 'release'
        with:
          repo_token: ${{ secrets.GITHUB_TOKEN }}
          file: ./go-for-win7-${{ env.ASSET_NAME }}.zip*
          tag: ${{ github.ref }}
          file_glob: true
